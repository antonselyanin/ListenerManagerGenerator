import ListenerContainer
{% for protocol in types.implementing.AutoListenerManageable %}
class ExampleListenerManager: {{ protocol.name }} {
    private let container: ListenerContainer<{{ protocol.name }}> = ListenerContainer()

    func addListener(_ listener: {{ protocol.name }}) {
        container.addListener(listener)
    }

    func removeListener(_ listener: {{ protocol.name }}) {
        container.removeListener(listener)
    }
    {% for method in protocol.methods %}
    func {{ method.shortName }}({% for param in method.parameters %}{{ param.argumentLabel }}{% if param.argumentLabel != param.name %} {{ param.name }}{% endif %}: {{ param.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}) {
        container.perform { listener in
            listener.{{ method.shortName }}({% for param in method.parameters %}{% if param.argumentLabel != "_" %}{{ param.argumentLabel }}: {% endif %}{{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
        }
    }
    {% endfor %}
}
{% endfor %}
